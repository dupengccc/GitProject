using Common;
using Common.Enums;
using Domain;
using Microsoft.AspNet.SignalR;
using Microsoft.CSharp.RuntimeBinder;
using Service;
using Service.IService;
using Service.IService.SysManage;
using Spring.Context.Support;
using System;
using System.Configuration;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace wkmvc.Hubs
{
    
 public class ChatHub: Hub
 {
   //     [CompilerGenerated]
   //     private static class<Register>o__SiteContainer0
	  //  {
			////public static CallSite<Action<CallSite, object, string>> <>p__Site1;
			////public static CallSite<Action<CallSite, object, string>> <>p__Site2;
			////public static CallSite<Action<CallSite, object, string>> <>p__Site3;
			////public static CallSite<Action<CallSite, object, string>> <>p__Site4;
			////public static CallSite<Action<CallSite, object, string>> <>p__Site5;
			////public static CallSite<Action<CallSite, object, string>> <>p__Site6;
	  // }
   //      [CompilerGenerated]
   //     private static class <Send>o__SiteContainer1d
   // {
   // 	public static CallSite<Action<CallSite, object, string>> <>p__Site1e;
   // 	public static CallSite<Action<CallSite, object, string>> <>p__Site1f;
   // 	public static CallSite<Action<CallSite, object, string>> <>p__Site20;
   // 	public static CallSite<Action<CallSite, object, string>> <>p__Site21;
   // 	public static CallSite<Action<CallSite, object, string>> <>p__Site22;
   // }
   // [CompilerGenerated]
   // private static class <SendSingle>o__SiteContainer25
   //  {
   // 	public static CallSite<Action<CallSite, object, string>> <>p__Site26;
   // 	public static CallSite<Action<CallSite, object, string>> <>p__Site27;
   // 	public static CallSite<Action<CallSite, object, string>> <>p__Site28;
   // 	public static CallSite<Action<CallSite, object, string>> <>p__Site29;
   // 	public static CallSite<Action<CallSite, object, string>> <>p__Site2a;
   // }
   // [CompilerGenerated]
   // private static class <OnDisconnected>o__SiteContainer2d
   // {
   // 	public static CallSite<Action<CallSite, object, string>> <>p__Site2e;
   // 	public static CallSite<Action<CallSite, object, string>> <>p__Site2f;
   // }
    public IUserManage UserManage = ContextRegistry.GetContext().GetObject("Service.User") as IUserManage;
    public IDepartmentManage DepartmentManage = ContextRegistry.GetContext().GetObject("Service.Department") as IDepartmentManage;
    public ICodeManage CodeManage = ContextRegistry.GetContext().GetObject("Service.Code") as ICodeManage;
    public IUserOnlineManage UserOnlineManage = ContextRegistry.GetContext().GetObject("Service.UserOnlineManage") as IUserOnlineManage;
    public IChatMessageManage ChatMessageManage = ContextRegistry.GetContext().GetObject("Service.ChatMessageManage") as IChatMessageManage;
public void Register(string account, string password)
{
    try
    {
        SYS_USER User = this.UserManage.Get((SYS_USER p) => p.ACCOUNT == account);
        if (User != null && User.PASSWORD == password)
        {
            UserOnline sYS_USER_ONLINE = this.UserOnlineManage.LoadListAll( p=> p.FK_Userid == User.ID).FirstOrDefault<UserOnline>();
            sYS_USER_ONLINE.ConnectId = base.Context.ConnectionId;
            sYS_USER_ONLINE.OnlineDate = DateTime.Now;
            sYS_USER_ONLINE.IsOnline = true;
            sYS_USER_ONLINE.UserIP = Utils.GetIP();
            this.UserOnlineManage.Update(sYS_USER_ONLINE);
            int num = int.Parse(ConfigurationManager.AppSettings["HistoryDays"]);
            DateTime dtHistory = DateTime.Now.AddDays((double)(-(double)num));
            IQueryable<SYS_CHATMESSAGE> source = this.ChatMessageManage.LoadAll((SYS_CHATMESSAGE p) => p.MessageDate > dtHistory);
            if (User.ID == ClsDic.DicRole["超级管理员"])
            {
                if (ChatHub.<Register> o__SiteContainer0.<> p__Site1 == null)
                {
                    ChatHub.<Register> o__SiteContainer0.<> p__Site1 = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "UserLoginNotice", null, typeof(ChatHub), new CSharpArgumentInfo[]
                    {
                                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                ChatHub.< Register > o__SiteContainer0.<> p__Site1.Target(ChatHub.< Register > o__SiteContainer0.<> p__Site1, base.Clients.All, "超级管理员：" + User.NAME + " 上线了!");
                var obj = (
                    from p in source
                    orderby p.MessageDate
                    select p).ToList<SYS_CHATMESSAGE>().Select(delegate (SYS_CHATMESSAGE p)
                    {
                        return new
                        {
                            UserName = this.UserManage.Get((SYS_USER m) => m.ID == p.FromUser).NAME,
                            UserFace = string.IsNullOrEmpty(this.UserManage.Get((SYS_USER m) => m.ID == p.FromUser).FACE_IMG) ? ("/Pro/Project/User_Default_Avatat?name=" + this.UserManage.Get((SYS_USER m) => m.ID == p.FromUser).NAME.Substring(0, 1)) : this.UserManage.Get((SYS_USER m) => m.ID == p.FromUser).FACE_IMG,
                            MessageType = this.GetMessageType(p.MessageType),
                            FromUser = p.FromUser,
                            MessageContent = p.MessageContent,
                            MessageDate = p.MessageDate.GetDateTimeFormats('D')[1].ToString() + " - " + p.MessageDate.ToString("HH:mm:ss"),
                            ConnectId = this.UserOnlineManage.LoadListAll((SYS_USER_ONLINE m) => m.SYS_USER.ID == p.FromUser).FirstOrDefault<SYS_USER_ONLINE>().ConnectId
                        };
                    }).ToList();
                if (ChatHub.< Register > o__SiteContainer0.<> p__Site2 == null)
                {
                    ChatHub.< Register > o__SiteContainer0.<> p__Site2 = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "addHistoryMessageToPage", null, typeof(ChatHub), new CSharpArgumentInfo[]
                    {
                                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                ChatHub.< Register > o__SiteContainer0.<> p__Site2.Target(ChatHub.< Register > o__SiteContainer0.<> p__Site2, base.Clients.Client(base.Context.ConnectionId), JsonConverter.Serialize(obj, false));
            }
            else
            {
                SYS_DEPARTMENT Depart = this.GetUserDepart(User.DPTID);
                if (Depart != null && !string.IsNullOrEmpty(Depart.ID))
                {
                    base.Groups.Add(base.Context.ConnectionId, Depart.ID);
                    if (ChatHub.< Register > o__SiteContainer0.<> p__Site3 == null)
                    {
                        ChatHub.< Register > o__SiteContainer0.<> p__Site3 = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "UserLoginNotice", null, typeof(ChatHub), new CSharpArgumentInfo[]
                        {
                                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                        }));
                    }
                    ChatHub.< Register > o__SiteContainer0.<> p__Site3.Target(ChatHub.< Register > o__SiteContainer0.<> p__Site3, base.Clients.All, string.Concat(new string[]
                    {
                                Depart.NAME,
                                " - ",
                                this.CodeManage.Get((SYS_CODE m) => m.CODEVALUE == User.LEVELS && m.CODETYPE == "ZW").NAMETEXT,
                                "：",
                                User.NAME,
                                " 上线了!"
                    }));
                    int typeOfpublic = ClsDic.DicMessageType["广播"];
                    int typeOfgroup = ClsDic.DicMessageType["群组"];
                    int typeOfprivate = ClsDic.DicMessageType["私聊"];
                    var obj2 = (
                        from p in source
                        where p.MessageType == typeOfpublic || p.FromUser == User.ID || (p.MessageType == typeOfgroup && p.ToGroup == Depart.ID) || (p.MessageType == typeOfprivate && p.ToGroup == User.ID.ToString())
                        orderby p.MessageDate
                        select p).ToList<SYS_CHATMESSAGE>().Select(delegate (SYS_CHATMESSAGE p)
                        {
                            return new
                            {
                                UserName = this.UserManage.Get((SYS_USER m) => m.ID == p.FromUser).NAME,
                                UserFace = string.IsNullOrEmpty(this.UserManage.Get((SYS_USER m) => m.ID == p.FromUser).FACE_IMG) ? ("/Pro/Project/User_Default_Avatat?name=" + this.UserManage.Get((SYS_USER m) => m.ID == p.FromUser).NAME.Substring(0, 1)) : this.UserManage.Get((SYS_USER m) => m.ID == p.FromUser).FACE_IMG,
                                MessageType = this.GetMessageType(p.MessageType),
                                FromUser = p.FromUser,
                                MessageContent = p.MessageContent,
                                MessageDate = p.MessageDate.GetDateTimeFormats('D')[1].ToString() + " - " + p.MessageDate.ToString("HH:mm:ss"),
                                ConnectId = this.UserOnlineManage.LoadListAll((SYS_USER_ONLINE m) => m.SYS_USER.ID == p.FromUser).FirstOrDefault<SYS_USER_ONLINE>().ConnectId
                            };
                        }).ToList();
                    if (ChatHub.< Register > o__SiteContainer0.<> p__Site4 == null)
                    {
                        ChatHub.< Register > o__SiteContainer0.<> p__Site4 = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "addHistoryMessageToPage", null, typeof(ChatHub), new CSharpArgumentInfo[]
                        {
                                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                        }));
                    }
                    ChatHub.< Register > o__SiteContainer0.<> p__Site4.Target(ChatHub.< Register > o__SiteContainer0.<> p__Site4, base.Clients.Client(base.Context.ConnectionId), JsonConverter.Serialize(obj2, false));
                }
            }
            if (ChatHub.< Register > o__SiteContainer0.<> p__Site5 == null)
            {
                ChatHub.< Register > o__SiteContainer0.<> p__Site5 = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "ContactsNotice", null, typeof(ChatHub), new CSharpArgumentInfo[]
                {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            ChatHub.< Register > o__SiteContainer0.<> p__Site5.Target(ChatHub.< Register > o__SiteContainer0.<> p__Site5, base.Clients.All, JsonConverter.Serialize(sYS_USER_ONLINE, false));
        }
    }
    catch (Exception ex)
    {
        if (ChatHub.< Register > o__SiteContainer0.<> p__Site6 == null)
        {
            ChatHub.< Register > o__SiteContainer0.<> p__Site6 = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "UserLoginNotice", null, typeof(ChatHub), new CSharpArgumentInfo[]
            {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
            }));
        }
        ChatHub.< Register > o__SiteContainer0.<> p__Site6.Target(ChatHub.< Register > o__SiteContainer0.<> p__Site6, base.Clients.Client(base.Context.ConnectionId), "出错了：" + ex.Message);
        throw ex.InnerException;
    }
}
public void Send(string message, string groupId)
{
    try
    {
        UserOnline sYS_USER_ONLINE = this.UserOnlineManage.LoadListAll((SYS_USER_ONLINE p) => p.ConnectId == this.Context.ConnectionId).FirstOrDefault<SYS_USER_ONLINE>();
        if (string.IsNullOrEmpty(groupId))
        {
            this.ChatMessageManage.Save(new SYS_CHATMESSAGE
            {
                FromUser = sYS_USER_ONLINE.FK_Userid,
                MessageType = ClsDic.DicMessageType["广播"],
                MessageContent = message,
                MessageDate = DateTime.Now,
                MessageIP = Utils.GetIP()
            });
            Message obj = new Message
            {
                ConnectId = sYS_USER_ONLINE.ConnectId,
                UserName = sYS_USER_ONLINE.s,
                UserFace = string.IsNullOrEmpty(sYS_USER_ONLINE.SYS_USER.FACE_IMG) ? ("/Pro/Project/User_Default_Avatat?name=" + sYS_USER_ONLINE.SYS_USER.NAME.Substring(0, 1)) : sYS_USER_ONLINE.SYS_USER.FACE_IMG,
                MessageDate = DateTime.Now.GetDateTimeFormats('D')[1].ToString() + " - " + DateTime.Now.ToString("HH:mm:ss"),
                MessageContent = message,
                MessageType = "public",
                UserId = sYS_USER_ONLINE.SYS_USER.ID
            };
            if (ChatHub.< Send > o__SiteContainer1d.<> p__Site1e == null)
            {
                ChatHub.< Send > o__SiteContainer1d.<> p__Site1e = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "addNewMessageToPage", null, typeof(ChatHub), new CSharpArgumentInfo[]
                {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            ChatHub.< Send > o__SiteContainer1d.<> p__Site1e.Target(ChatHub.< Send > o__SiteContainer1d.<> p__Site1e, base.Clients.All, JsonConverter.Serialize(obj, false));
        }
        else
        {
            this.ChatMessageManage.Save(new SYS_CHATMESSAGE
            {
                FromUser = sYS_USER_ONLINE.FK_UserId,
                MessageType = ClsDic.DicMessageType["群组"],
                MessageContent = message,
                MessageDate = DateTime.Now,
                MessageIP = Utils.GetIP(),
                ToGroup = groupId
            });
            Message obj2 = new Message
            {
                ConnectId = sYS_USER_ONLINE.ConnectId,
                UserName = sYS_USER_ONLINE.SYS_USER.NAME,
                UserFace = string.IsNullOrEmpty(sYS_USER_ONLINE.SYS_USER.FACE_IMG) ? ("/Pro/Project/User_Default_Avatat?name=" + sYS_USER_ONLINE.SYS_USER.NAME.Substring(0, 1)) : sYS_USER_ONLINE.SYS_USER.FACE_IMG,
                MessageDate = DateTime.Now.GetDateTimeFormats('D')[1].ToString() + " - " + DateTime.Now.ToString("HH:mm:ss"),
                MessageContent = message,
                MessageType = "group",
                UserId = sYS_USER_ONLINE.SYS_USER.ID
            };
            if (ChatHub.< Send > o__SiteContainer1d.<> p__Site1f == null)
            {
                ChatHub.< Send > o__SiteContainer1d.<> p__Site1f = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "addNewMessageToPage", null, typeof(ChatHub), new CSharpArgumentInfo[]
                {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                }));
            }
            ChatHub.< Send > o__SiteContainer1d.<> p__Site1f.Target(ChatHub.< Send > o__SiteContainer1d.<> p__Site1f, base.Clients.Group(groupId, new string[0]), JsonConverter.Serialize(obj2, false));
            SYS_DEPARTMENT userDepart = this.GetUserDepart(sYS_USER_ONLINE.SYS_USER.DPTID);
            if (userDepart == null)
            {
                if (ChatHub.< Send > o__SiteContainer1d.<> p__Site20 == null)
                {
                    ChatHub.< Send > o__SiteContainer1d.<> p__Site20 = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "addNewMessageToPage", null, typeof(ChatHub), new CSharpArgumentInfo[]
                    {
                                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                ChatHub.< Send > o__SiteContainer1d.<> p__Site20.Target(ChatHub.< Send > o__SiteContainer1d.<> p__Site20, base.Clients.Client(base.Context.ConnectionId), JsonConverter.Serialize(obj2, false));
            }
            else
            {
                if (userDepart.ID != groupId)
                {
                    if (ChatHub.< Send > o__SiteContainer1d.<> p__Site21 == null)
                    {
                        ChatHub.< Send > o__SiteContainer1d.<> p__Site21 = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "addNewMessageToPage", null, typeof(ChatHub), new CSharpArgumentInfo[]
                        {
                                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                        }));
                    }
                    ChatHub.< Send > o__SiteContainer1d.<> p__Site21.Target(ChatHub.< Send > o__SiteContainer1d.<> p__Site21, base.Clients.Client(base.Context.ConnectionId), JsonConverter.Serialize(obj2, false));
                }
            }
        }
    }
    catch (Exception ex)
    {
        if (ChatHub.< Send > o__SiteContainer1d.<> p__Site22 == null)
        {
            ChatHub.< Send > o__SiteContainer1d.<> p__Site22 = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "addSysMessageToPage", null, typeof(ChatHub), new CSharpArgumentInfo[]
            {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
            }));
        }
        ChatHub.< Send > o__SiteContainer1d.<> p__Site22.Target(ChatHub.< Send > o__SiteContainer1d.<> p__Site22, base.Clients.Client(base.Context.ConnectionId), "系统消息：消息发送失败，请稍后再试！");
        throw ex.InnerException;
    }
}
public void SendSingle(string clientId, string message)
{
    try
    {
        if (string.IsNullOrEmpty(clientId))
        {
            if (ChatHub.< SendSingle > o__SiteContainer25.<> p__Site26 == null)
            {
                ChatHub.< SendSingle > o__SiteContainer25.<> p__Site26 = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "addSysMessageToPage", null, typeof(ChatHub), new CSharpArgumentInfo[]
                {
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                }));
            }
            ChatHub.< SendSingle > o__SiteContainer25.<> p__Site26.Target(ChatHub.< SendSingle > o__SiteContainer25.<> p__Site26, base.Clients.Client(base.Context.ConnectionId), "系统消息：用户不存在！");
        }
        else
        {
            SYS_USER_ONLINE sYS_USER_ONLINE = this.UserOnlineManage.LoadListAll((SYS_USER_ONLINE p) => p.ConnectId == this.Context.ConnectionId).FirstOrDefault<SYS_USER_ONLINE>();
            SYS_USER_ONLINE sYS_USER_ONLINE2 = this.UserOnlineManage.LoadListAll((SYS_USER_ONLINE p) => p.ConnectId == clientId).FirstOrDefault<SYS_USER_ONLINE>();
            if (sYS_USER_ONLINE2 == null)
            {
                if (ChatHub.< SendSingle > o__SiteContainer25.<> p__Site27 == null)
                {
                    ChatHub.< SendSingle > o__SiteContainer25.<> p__Site27 = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "addSysMessageToPage", null, typeof(ChatHub), new CSharpArgumentInfo[]
                    {
                                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
                    }));
                }
                ChatHub.< SendSingle > o__SiteContainer25.<> p__Site27.Target(ChatHub.< SendSingle > o__SiteContainer25.<> p__Site27, base.Clients.Client(base.Context.ConnectionId), "系统消息：用户不存在！");
            }
            else
            {
                this.ChatMessageManage.Save(new SYS_CHATMESSAGE
                {
                    FromUser = sYS_USER_ONLINE.FK_UserId,
                    MessageType = ClsDic.DicMessageType["私聊"],
                    MessageContent = message,
                    MessageDate = DateTime.Now,
                    MessageIP = Utils.GetIP(),
                    ToGroup = sYS_USER_ONLINE.SYS_USER.ID.ToString()
                });
                Message obj = new Message
                {
                    ConnectId = sYS_USER_ONLINE.ConnectId,
                    UserName = sYS_USER_ONLINE.SYS_USER.NAME,
                    UserFace = string.IsNullOrEmpty(sYS_USER_ONLINE.SYS_USER.FACE_IMG) ? ("/Pro/Project/User_Default_Avatat?name=" + sYS_USER_ONLINE.SYS_USER.NAME.Substring(0, 1)) : sYS_USER_ONLINE.SYS_USER.FACE_IMG,
                    MessageDate = DateTime.Now.GetDateTimeFormats('D')[1].ToString() + " - " + DateTime.Now.ToString("HH:mm:ss"),
                    MessageContent = message,
                    MessageType = "private",
                    UserId = sYS_USER_ONLINE.SYS_USER.ID
                };
                if (sYS_USER_ONLINE2.IsOnline)
                {
                    if (ChatHub.< SendSingle > o__SiteContainer25.<> p__Site28 == null)
                    {
                        ChatHub.< SendSingle > o__SiteContainer25.<> p__Site28 = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "addNewMessageToPage", null, typeof(ChatHub), new CSharpArgumentInfo[]
                        {
                                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                        }));
                    }
                    ChatHub.< SendSingle > o__SiteContainer25.<> p__Site28.Target(ChatHub.< SendSingle > o__SiteContainer25.<> p__Site28, base.Clients.Client(clientId), JsonConverter.Serialize(obj, false));
                }
                if (ChatHub.< SendSingle > o__SiteContainer25.<> p__Site29 == null)
                {
                    ChatHub.< SendSingle > o__SiteContainer25.<> p__Site29 = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "addNewMessageToPage", null, typeof(ChatHub), new CSharpArgumentInfo[]
                    {
                                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
                    }));
                }
                ChatHub.< SendSingle > o__SiteContainer25.<> p__Site29.Target(ChatHub.< SendSingle > o__SiteContainer25.<> p__Site29, base.Clients.Client(base.Context.ConnectionId), JsonConverter.Serialize(obj, false));
            }
        }
    }
    catch (Exception ex)
    {
        if (ChatHub.< SendSingle > o__SiteContainer25.<> p__Site2a == null)
        {
            ChatHub.< SendSingle > o__SiteContainer25.<> p__Site2a = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "addSysMessageToPage", null, typeof(ChatHub), new CSharpArgumentInfo[]
            {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, null)
            }));
        }
        ChatHub.< SendSingle > o__SiteContainer25.<> p__Site2a.Target(ChatHub.< SendSingle > o__SiteContainer25.<> p__Site2a, base.Clients.Client(base.Context.ConnectionId), "系统消息：消息发送失败，请稍后再试！");
        throw ex.InnerException;
    }
}
public override Task OnDisconnected(bool stopCalled)
{
    SYS_USER_ONLINE UserOnline = this.UserOnlineManage.LoadListAll((SYS_USER_ONLINE p) => p.ConnectId == this.Context.ConnectionId).FirstOrDefault<SYS_USER_ONLINE>();
    UserOnline.ConnectId = base.Context.ConnectionId;
    UserOnline.OfflineDate = new DateTime?(DateTime.Now);
    UserOnline.IsOnline = false;
    this.UserOnlineManage.Update(UserOnline);
    SYS_USER sYS_USER = this.UserManage.Get((SYS_USER p) => p.ID == UserOnline.FK_UserId);
    if (ChatHub.< OnDisconnected > o__SiteContainer2d.<> p__Site2e == null)
    {
        ChatHub.< OnDisconnected > o__SiteContainer2d.<> p__Site2e = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "UserLogOutNotice", null, typeof(ChatHub), new CSharpArgumentInfo[]
        {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
        }));
    }
    ChatHub.< OnDisconnected > o__SiteContainer2d.<> p__Site2e.Target(ChatHub.< OnDisconnected > o__SiteContainer2d.<> p__Site2e, base.Clients.All, sYS_USER.NAME + "：离线了!");
    if (ChatHub.< OnDisconnected > o__SiteContainer2d.<> p__Site2f == null)
    {
        ChatHub.< OnDisconnected > o__SiteContainer2d.<> p__Site2f = CallSite<Action<CallSite, object, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "ContactsNotice", null, typeof(ChatHub), new CSharpArgumentInfo[]
        {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null)
        }));
    }
    ChatHub.< OnDisconnected > o__SiteContainer2d.<> p__Site2f.Target(ChatHub.< OnDisconnected > o__SiteContainer2d.<> p__Site2f, base.Clients.All, JsonConverter.Serialize(UserOnline, false));
    return base.OnDisconnected(true);
}
private SYS_DEPARTMENT GetUserDepart(string departId)
{
    SYS_DEPARTMENT sYS_DEPARTMENT = this.DepartmentManage.Get((SYS_DEPARTMENT p) => p.ID == departId);
    if (sYS_DEPARTMENT != null)
    {
        string ParentId = sYS_DEPARTMENT.PARENTID;
        SYS_DEPARTMENT sYS_DEPARTMENT2 = new SYS_DEPARTMENT();
        for (int? num = sYS_DEPARTMENT.BUSINESSLEVEL; num >= 1; num--)
        {
            sYS_DEPARTMENT2 = this.DepartmentManage.Get((SYS_DEPARTMENT p) => p.ID == ParentId);
            if (string.IsNullOrEmpty(sYS_DEPARTMENT2.PARENTID))
            {
                break;
            }
            ParentId = sYS_DEPARTMENT2.PARENTID;
        }
        return sYS_DEPARTMENT2;
    }
    return null;
}
private string GetMessageType(int type)
{
    if (type == ClsDic.DicMessageType["广播"])
    {
        return "public";
    }
    if (type == ClsDic.DicMessageType["群组"])
    {
        return "group";
    }
    return "private";
}
}
}